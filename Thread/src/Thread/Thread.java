package Thread;

public class Thread {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		 * 멀티테스킹!!
		 * multi-tasking 일반적인 용어인데
		 * 말그대로 여러개의 작업을 여러개하는 것
		 * cpu라는 것은 어느 한시점에 하나만 할수 있음 원래
		 * 마이크로 프로세서라든지 os관점에서 본다면 
		 * 여러개의 응용프로그램을 동시에 관리하겠다
		 * cpu 에 시간을 1/n로 나눠주는 것이다.
		 * 실제적으로는 시간을 나누지만 순차적으로 돌리다보면 긴시간에서 본다면 
		 * n개가 동시에 돌아가는 것으로 보인다.
		 * 각각의 프로세스로 관리하는 것 별개의 프로세스로 관리하는 것
		 * 프로그래머는 하나의 응용프로그램을 짜는데 내부 적으로도 다양한 작업들이있을 수 있다.
		 * gui는 다운로드나 입출력이나 입력을 받아야되는 경우가 있는데
		 * 하나의 프로그램에서도 여러개의 작업을 동시에 해야하는데 이것을 어떻게 할것인가
		 * 1. 하나의 응용프로그램을 n개의 프로세스로 돌리게 가능 - mulit process !!!
		 * 2. 너무 부담스러우니 흐름을 나누자 독립적인 제어프로그램을 갖도록 하자 - thread !!!!!!!!!
		 * 운영체제가 할줄 알아야한다. 운영체제한테 요청을 하는 것이기 때문에 지원을 해야한다. 운영체제가
		 * 즉 운영체제가 call을 부르는 방식으로 한다
		 * 근데 너무 멀어! 그래서 멀티 프로세스는 안하고
		 * 쓰레드도 jvm에서 Thread해주는 것
		 * 운영체제에서 보면 모른다!
		 * 언어차원에서 쓰레드를 지원하는 거임 
		 * 덩어리가 4개있으면 1조금 2조금 3조금 4에서 쓰레드각각중 하나에 조금 이런식으로 지원함
		 * 
		 * Thread 클래스
		 * 첫번째 방법은 쓰레드 클래스를 만들어 쓰는 것이다.
		 * 1. Thread 상속
		 * 2. run() 오버라이딩
		 * 3. public static void main -> 메인 쓰레드라고 부름 얘가 실행하는게 main 메소드 -> 하나의 스레드를 갖음
		 * 근데 여기서 쓰레드를 하나더 만들겠다라는 것임 그게 run()임  main()이랑 비슷한 거임
		 * 이렇게 하면 main 같은게 2개 돌아가는 거임
		 * 타이머 스레드 객체만들고 start시켜야 run을 불러준다.
		 *
		 * os차원에서는 하나의 프로세스로 보임
		 * 자바는 자기가 알아서 나눠주는거임
		 * 결국 메인 두개를 짜면됨
		 * main() run() 짜고 하면 됨
		 * 
		 * 두번째
		 * runable은 원래 쓰레드랑 관련이 없음
		 * 함수들을 많이 쓰는 데 자바는 클래스 단위로 움직여야되는데 자바에서는 interface이다
		 * interface는 대부분 이름이 able으로 끝남
		 * running 할수 있는 객체가 된다.
		 * run 
		 * 쓰래드 객체 생성
		 * 객체 던져주기
		 * start하면됨
		 * 
		 * 원을 프로세스 실을 쓰레드
		 * 쓰레드를 이제 별도로 만들어 갈수 있는 것이다
		 * .start를 통해서 실행을 하는데 run에다가 구현을 했다.
		 * run을 그냥 실행하는거는 함수호출임그냥
		 * 
		 * main 함수 종료는 코드 끝까지가면 종료하는 거임
		 * run도 마찬가지임
		 * 
		 * 근데 이제 우리는 던져놓고 협업을 해야하는 거니까 어떤 데이터를 주고 받고 해야하는 거임 sync를 맞추는 거임
		 * 종료하는 방법부터 보자
		 * 1. return 이나 run이 끝나면 종료임
		 * 2. 쓰레드를 강제종료 : flag
		 * 
		 */
	}

}
